@page
@model IndexModel
@{
    ViewData["Title"] = "Tamiya RC Car 3D";
}

<div class="container mt-5">
    <h1 class="text-center mb-4">Tamiya RC Car 3D Viewer</h1>
    
    <div class="row">
        <div class="col-md-10 mx-auto">
            <!-- 3D Container -->
            <div id="rc-container" style="height: 600px; background-color: #f0f0f0;"></div>
            
            <!-- Controls -->
            <div class="text-center mt-3">
                <button id="rotate-btn" class="btn btn-primary">หมุนรถ</button>
                <button id="change-body-btn" class="btn btn-success">เปลี่ยนสีตัวถัง</button>
                <button id="drive-btn" class="btn btn-warning">ขับเคลื่อน</button>
                <button id="reset-btn" class="btn btn-secondary">รีเซ็ต</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.7.1/gsap.min.js"></script>
    <script>
        // Initialize 3D scene
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0xf0f0f0);
        
        const container = document.getElementById('rc-container');
        const camera = new THREE.PerspectiveCamera(
            60, 
            container.clientWidth / container.clientHeight, 
            0.1, 
            1000
        );
        camera.position.set(0, 1.5, 5);
        
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(container.clientWidth, container.clientHeight);
        renderer.shadowMap.enabled = true;
        container.appendChild(renderer.domElement);

        // Lighting
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
        scene.add(ambientLight);
        
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
        directionalLight.position.set(5, 10, 7);
        directionalLight.castShadow = true;
        scene.add(directionalLight);

        // Create Tamiya RC Car model
        const createTamiyaRC = () => {
            const car = new THREE.Group();
            
            // Main chassis
            const chassisGeometry = new THREE.BoxGeometry(2.5, 0.8, 1.2);
            const chassisMaterial = new THREE.MeshPhongMaterial({ 
                color: 0xff0000,
                metalness: 0.5,
                roughness: 0.4
            });
            const chassis = new THREE.Mesh(chassisGeometry, chassisMaterial);
            chassis.position.y = 0.4;
            chassis.castShadow = true;
            car.add(chassis);
            
            // Roll cage
            const cageGeometry = new THREE.BoxGeometry(2.6, 0.6, 1.3);
            const cageMaterial = new THREE.MeshPhongMaterial({ 
                color: 0x333333,
                wireframe: true,
                transparent: true,
                opacity: 0.7
            });
            const cage = new THREE.Mesh(cageGeometry, cageMaterial);
            cage.position.y = 0.9;
            car.add(cage);
            
            // Wheels
            const wheelGeometry = new THREE.CylinderGeometry(0.3, 0.3, 0.2, 32);
            const wheelMaterial = new THREE.MeshPhongMaterial({ color: 0x222222 });
            const tireMaterial = new THREE.MeshPhongMaterial({ color: 0x333333 });
            
            for(let i = 0; i < 4; i++) {
                const wheel = new THREE.Mesh(wheelGeometry, wheelMaterial);
                const tire = new THREE.Mesh(
                    new THREE.CylinderGeometry(0.35, 0.35, 0.22, 32),
                    tireMaterial
                );
                
                wheel.rotation.z = Math.PI / 2;
                tire.rotation.z = Math.PI / 2;
                
                if(i < 2) {
                    wheel.position.set(-1.1, 0.2, -0.6);
                    tire.position.set(-1.1, 0.2, -0.6);
                } else {
                    wheel.position.set(1.1, 0.2, -0.6);
                    tire.position.set(1.1, 0.2, -0.6);
                }
                
                if(i % 2 === 1) {
                    wheel.position.z *= -1;
                    tire.position.z *= -1;
                }
                
                car.add(wheel);
                car.add(tire);
            }
            
            // RC Antenna
            const antennaGeometry = new THREE.CylinderGeometry(0.02, 0.02, 0.8, 8);
            const antennaMaterial = new THREE.MeshPhongMaterial({ color: 0x666666 });
            const antenna = new THREE.Mesh(antennaGeometry, antennaMaterial);
            antenna.position.set(0, 1.2, -0.4);
            antenna.rotation.x = Math.PI / 6;
            car.add(antenna);
            
            // Headlights
            const headlightGeometry = new THREE.SphereGeometry(0.1, 16, 16);
            const headlightMaterial = new THREE.MeshPhongMaterial({ 
                color: 0xffffcc,
                emissive: 0xffff00,
                emissiveIntensity: 0.5
            });
            
            const headlight1 = new THREE.Mesh(headlightGeometry, headlightMaterial);
            headlight1.position.set(-1.3, 0.6, 0.4);
            car.add(headlight1);
            
            const headlight2 = new THREE.Mesh(headlightGeometry, headlightMaterial);
            headlight2.position.set(-1.3, 0.6, -0.4);
            car.add(headlight2);
            
            // Spoiler
            const spoilerGeometry = new THREE.BoxGeometry(0.8, 0.1, 0.3);
            const spoilerMaterial = new THREE.MeshPhongMaterial({ color: 0x333333 });
            const spoiler = new THREE.Mesh(spoilerGeometry, spoilerMaterial);
            spoiler.position.set(0, 1.0, 0);
            car.add(spoiler);
            
            return car;
        };

        const tamiyaCar = createTamiyaRC();
        scene.add(tamiyaCar);

        // Add racing track surface
        const trackGeometry = new THREE.PlaneGeometry(20, 20);
        const trackMaterial = new THREE.MeshStandardMaterial({ 
            color: 0x555555,
            roughness: 0.8,
            metalness: 0.2
        });
        const track = new THREE.Mesh(trackGeometry, trackMaterial);
        track.rotation.x = -Math.PI / 2;
        track.receiveShadow = true;
        scene.add(track);

        // Add grid helper
        const gridHelper = new THREE.GridHelper(20, 20, 0x888888, 0x444444);
        scene.add(gridHelper);

        // Controls
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.05;
        controls.minDistance = 3;
        controls.maxDistance = 10;

        // Animation loop
        const animate = () => {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        };
        animate();

        // Event handlers
        document.getElementById('rotate-btn').addEventListener('click', () => {
            gsap.to(tamiyaCar.rotation, { 
                y: tamiyaCar.rotation.y + Math.PI * 2, 
                duration: 3 
            });
        });

        const bodyColors = [0xff0000, 0x00ff00, 0x0000ff, 0xffff00, 0xff00ff];
        let colorIndex = 0;
        
        document.getElementById('change-body-btn').addEventListener('click', () => {
            colorIndex = (colorIndex + 1) % bodyColors.length;
            tamiyaCar.children[0].material.color.setHex(bodyColors[colorIndex]);
        });

        let isDriving = false;
        document.getElementById('drive-btn').addEventListener('click', () => {
            isDriving = !isDriving;
            
            if(isDriving) {
                gsap.to(tamiyaCar.position, {
                    z: tamiyaCar.position.z - 5,
                    duration: 3,
                    ease: "power1.inOut",
                    yoyo: true,
                    repeat: -1
                });
                
                gsap.to(tamiyaCar.rotation, {
                    x: 0.1,
                    duration: 0.5,
                    yoyo: true,
                    repeat: -1
                });
            } else {
                gsap.killTweensOf(tamiyaCar.position);
                gsap.killTweensOf(tamiyaCar.rotation);
                gsap.to(tamiyaCar.rotation, { x: 0, duration: 0.5 });
            }
        });

        document.getElementById('reset-btn').addEventListener('click', () => {
            controls.reset();
            camera.position.set(0, 1.5, 5);
            tamiyaCar.position.set(0, 0, 0);
            tamiyaCar.rotation.set(0, 0, 0);
            gsap.killTweensOf(tamiyaCar.position);
            gsap.killTweensOf(tamiyaCar.rotation);
            isDriving = false;
        });

        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = container.clientWidth / container.clientHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(container.clientWidth, container.clientHeight);
        });
    </script>
}